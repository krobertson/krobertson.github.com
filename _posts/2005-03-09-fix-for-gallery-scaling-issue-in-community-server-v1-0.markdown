--- 
wordpress_id: 20
layout: post
title: Fix for Gallery scaling issue in Community Server v1.0
wordpress_url: /archive/fix-for-gallery-scaling-issue-in-community-server-v1-0/
---

<p>With the release of the <a href="http://www.qgyen.net/blog/archive/2005/03/03/951.aspx">nGallery to CS converter</a>, we finally got people with good sized nGallery installs running on Community Server.&nbsp; Prior to this, it was most myself and others running fair small, frequently rebuilt installations, or my own website, which only has a moderate amount of pictures.</p>
<p>So we instantly started getting people with thousands of pictures in their Gallery and some bad performance issues started showing up.&nbsp; With some debugging, we tracked it down to the cs_PostCategories_Get procedure timing out, causing an exception, and breaking a bunch of things.</p>
<p>The cause of the problem?&nbsp; The procedure was using some inefficient SQL in order to get the total number of posts and the most recent post date&nbsp;in it and a total of&nbsp;all of its subcategories.&nbsp; Namely, it was using a couple of subqueries (meaning query within a query within a query), the IN clause, and a &ldquo;select top 1 &hellip; order by postdate desc&rdquo; in a few of the subqueries.&nbsp; On one database with ~95 categories and ~4000 pictures, this command could take almost a minute to execute.</p>
<p>The solution?&nbsp; We updated the sproc to use max(PostDate) instead of the top/order by.&nbsp; This brought the execution time down to ~1 second.&nbsp; We also changed all the subsubqueries and IN clauses to be inner joins.&nbsp; Doing this brought the execution time down to &lt;1 second.&nbsp; On my own site, which has about 50 categories and around 900 pictures, execution time went from 4 seconds to &lt;1 second.</p>
<p>To update the cs_PostCategories_Get procedure on your own site, run the following script:</p>
<blockquote dir="ltr">
<p>SET QUOTED_IDENTIFIER OFF <br />GO<br />SET ANSI_NULLS ON <br />GO</p>
<p>if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[cs_PostCategories_Get]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)<br />drop procedure [dbo].[cs_PostCategories_Get]<br />GO</p>
<p>CREATE PROCEDURE dbo.cs_PostCategories_Get<br />&nbsp;@SectionID int=0,<br />&nbsp;@ApplicationKey nvarchar(256)=null,<br />&nbsp;@CategoryType smallint<br />AS</p>
<p>if @ApplicationKey Is Not Null<br />begin<br />&nbsp;SELECT C.*,<br />&nbsp;&nbsp;TotalThreads = (SELECT COUNT(PIC.PostID) FROM cs_Posts_InCategories PIC INNER JOIN cs_Posts jP ON (jP.PostID = PIC.PostID AND jP.PostID = jP.ParentID) WHERE PIC.CategoryID = C.CategoryID),<br />&nbsp;&nbsp;TotalSubThreads = (SELECT COUNT(P.PostID) FROM cs_Posts P INNER JOIN cs_Post_Categories jC ON (jC.CategoryID = C.CategoryID OR jC.Path LIKE C.Path + convert(nvarchar, C.CategoryID) + '/%') INNER JOIN cs_Posts_InCategories jPIC ON (jPIC.CategoryID = jC.CategoryID) WHERE P.PostID = P.ParentID AND P.PostID = jPIC.PostID),<br />&nbsp;&nbsp;MostRecentPostDate = (SELECT MAX(PostDate) FROM cs_Posts_InCategories PIC INNER JOIN cs_Posts jP ON (jP.PostID = PIC.PostID AND jP.PostID = jP.ParentID) WHERE PIC.CategoryID = C.CategoryID),<br />&nbsp;&nbsp;MostRecentSubPostDate = (SELECT MAX(PostDate) FROM cs_Posts P INNER JOIN cs_Post_Categories jC ON (jC.CategoryID = C.CategoryID OR jC.Path LIKE C.Path + convert(nvarchar, C.CategoryID) + '/%') INNER JOIN cs_Posts_InCategories jPIC ON (jPIC.CategoryID = jC.CategoryID) WHERE P.PostID = P.ParentID AND P.PostID = jPIC.PostID)<br />&nbsp;FROM cs_Post_Categories C<br />&nbsp;LEFT JOIN cs_Sections F ON F.SectionID = C.SectionID<br />&nbsp;WHERE F.ApplicationKey = @ApplicationKey<br />&nbsp;&nbsp;AND C.CategoryType = @CategoryType<br />end<br />else<br />begin<br />&nbsp;SELECT C.*,<br />&nbsp;&nbsp;TotalThreads = (SELECT COUNT(PIC.PostID) FROM cs_Posts_InCategories PIC INNER JOIN cs_Posts jP ON (jP.PostID = PIC.PostID AND jP.PostID = jP.ParentID) WHERE PIC.CategoryID = C.CategoryID),<br />&nbsp;&nbsp;TotalSubThreads = (SELECT COUNT(P.PostID) FROM cs_Posts P INNER JOIN cs_Post_Categories jC ON (jC.CategoryID = C.CategoryID OR jC.Path LIKE C.Path + convert(nvarchar, C.CategoryID) + '/%') INNER JOIN cs_Posts_InCategories jPIC ON (jPIC.CategoryID = jC.CategoryID) WHERE P.PostID = P.ParentID AND P.PostID = jPIC.PostID),<br />&nbsp;&nbsp;MostRecentPostDate = (SELECT MAX(PostDate) FROM cs_Posts_InCategories PIC INNER JOIN cs_Posts jP ON (jP.PostID = PIC.PostID AND jP.PostID = jP.ParentID) WHERE PIC.CategoryID = C.CategoryID),<br />&nbsp;&nbsp;MostRecentSubPostDate = (SELECT MAX(PostDate) FROM cs_Posts P INNER JOIN cs_Post_Categories jC ON (jC.CategoryID = C.CategoryID OR jC.Path LIKE C.Path + convert(nvarchar, C.CategoryID) + '/%') INNER JOIN cs_Posts_InCategories jPIC ON (jPIC.CategoryID = jC.CategoryID) WHERE P.PostID = P.ParentID AND P.PostID = jPIC.PostID)<br />&nbsp;FROM cs_Post_Categories C<br />&nbsp;WHERE C.SectionID = @SectionID<br />&nbsp;&nbsp;AND C.CategoryType = @CategoryType<br />end</p>
<p>GO<br />SET QUOTED_IDENTIFIER OFF <br />GO<br />SET ANSI_NULLS ON <br />GO</p>
<p>GRANT&nbsp; EXECUTE&nbsp; ON [dbo].[cs_PostCategories_Get]&nbsp; TO [public]<br />GO</p></blockquote>
<p dir="ltr">I&rsquo;d also recommend that if you are running the nGallery to CS::Gallery converter, that afterwards you rebuild the indexes on all of the CS tables.&nbsp; You could do this by running the script <a href="http://www.sql-server-performance.com/rebuilding_indexes.asp">on this site</a>.</p>
         
