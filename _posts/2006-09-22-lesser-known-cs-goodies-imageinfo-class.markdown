--- 
wordpress_id: 203
layout: post
title: "Lesser known CS goodies: ImageInfo class"
wordpress_url: /archive/lesser-known-cs-goodies-imageinfo-class/
---

<p><a href="http://kevinharder.com/blogs/kevin/">Kevin</a>&nbsp;came to me the other day and was asking about whether I knew of a good way to efficiently extract the dimensions of 100+ images.&nbsp; He said he was starting to look at the System.Drawing namespace and was curious what the best way was.</p> <p>I immediately&nbsp;turned on my caps and said NO!&nbsp; DON&#39;T DO IT!&nbsp; Don&#39;t get me wrong, the System.Drawing namespace is great, but when you just need the dimensions of an image, and you are processing 100 images, it is not very efficient.&nbsp; It will need to load up the entire image, just so you can access some metadata about it.&nbsp; Do that 100+ times on a given run, and it will be incredibly slow and CPU hungry.</p> <p>I had encountered the same issue way back when we were developing Community Server v1.0.&nbsp; I had begun prototyping the FTP Gateway and one of my main things was that I wanted to queue up 1000 images to be sent in a row.&nbsp; It worked, but would have the CPU pinned at 80-100% the whole time.&nbsp; The problem was that the images would transfer so fast (since it was on the local network), and the slow down was where it accessed the image&#39;s dimensions and cached the EXIF data.&nbsp; Initially, we were using the System.Drawing namespace and was having to process the entire image when we were just accessing the metadata.</p> <p>So I set out to find a way to access the image&#39;s metadata directly, by looking at the raw header instead of relying on accessing it as an image.&nbsp; The solution was <a href="http://schmidt.devlib.org/image-info/">ImageInfo</a>.&nbsp; I found this class that did precisely what I wanted, just that it was written in Java.&nbsp; So I did what any determined developer would do and decided to port it.&nbsp; And in one night, I was able to get it ported over to C#, plugged into CS, and working in both the CS website and with the FTP Gateway.</p> <p>This class has been a part of Community Server v1.0 around beta2 or 3.&nbsp; It is in the CommunityServer.Components project, with its full namespace being CommunityServer.Components.ImageInfo.&nbsp; Since it is in Components, it is accessible by all CS assemblies.&nbsp; It is also quite easy to use.&nbsp; Just take this little tidbit:</p> <blockquote> <div class="CodeFormatContainer"> 

 <pre class="csharpcode"><div id="57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:688b696e-1198-43a1-b25c-89dcb5f0b204" class="wlWriterSmartContent" style="margin:0px;padding:0px;display:inline;float:none;"><pre style="background-color:White;"><div><span style="color:#008000;">//</span><span style="color:#008000;"> Check to make sure it is a valid image</span><span style="color:#008000;"><br /></span><span style="color:#000000;">FileStream stream </span><span style="color:#000000;">=</span><span style="color:#000000;"> File.Open(</span><span style="color:#000000;">&quot;</span><span style="color:#000000;">image.jpg</span><span style="color:#000000;">&quot;</span><span style="color:#000000;">, FileMode.Open);<br />ImageInfo imageInfo </span><span style="color:#000000;">=</span><span style="color:#000000;"> </span><span style="color:#0000ff;">new</span><span style="color:#000000;"> ImageInfo(stream);<br /></span><span style="color:#0000ff;">string</span><span style="color:#000000;"> contentType;<br /></span><span style="color:#0000ff;">int</span><span style="color:#000000;"> width;<br /></span><span style="color:#0000ff;">int</span><span style="color:#000000;"> height; <br /><br /></span><span style="color:#008000;">//</span><span style="color:#008000;"> If it is a picture, get the imagesize</span><span style="color:#008000;"><br /></span><span style="color:#0000ff;">if</span><span style="color:#000000;"> (imageInfo.Check())<br />{<br />   </span><span style="color:#008000;">//</span><span style="color:#008000;"> Get the image&#39;s width and height settings</span><span style="color:#008000;"><br /></span><span style="color:#000000;">   contentType </span><span style="color:#000000;">=</span><span style="color:#000000;"> imageInfo.MimeType;<br />   width </span><span style="color:#000000;">=</span><span style="color:#000000;"> imageInfo.Width;<br />   height </span><span style="color:#000000;">=</span><span style="color:#000000;"> imageInfo.Height;<br />} <br /><br />stream.Close();</span></div></pre></div></pre></div></blockquote>
<p>This is a simple and straightforward way to access some basic information about the image.&nbsp; Create a new ImageInfo object with the stream of the file.&nbsp; Then, call the imageInfo.Check() method to do the actual processing of the file.&nbsp; If it returns true, it is a valid image type of either JPEG, PNG, GIF, BMP, and a couple others.&nbsp; After that, you can access the properties that contain the info about the image.&nbsp; Overall, it gathers the following: </p>
<ul>
<li>Width/height 
</li><li>Bits per pixel 
</li><li>Whether the image is progressive 
</li><li>The image format (an enum of either JPEG, GIF, BMP, etc) 
</li><li>The content type (as a string) 
</li><li>Color type 
</li><li>Comments from the image (such as in JPEG files) 
</li><li>Number of images (such as with animated GIFs) 
</li><li>Physic width and height DPI</li></ul>
<p>Use it, love it, and enjoy it.&nbsp; Joy me next time, as I may make this into a semi-regular series to expose developers and power users to some of the great utilities buried deep within CS.</p>
         
