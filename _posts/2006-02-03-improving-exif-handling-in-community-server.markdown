--- 
wordpress_id: 83
layout: post
title: Improving EXIF handling in Community Server
wordpress_url: /archive/improving-exif-handling-in-community-server/
---

<p>For a while now, I&rsquo;ve been growing frustrated with some of the EXIF support in Community Server.&nbsp; Originally, it used the ImageProperties attributes that go along with System.Drawing.Image.&nbsp; However, in order to read those values, the image had to be completely processed into an Image object, and when we created the FTP Server add-on, bulk uploads would nearly peg the CPU while processing everything.</p>
<p>The solution was to adapt a way of reading the properties raw from the image, without having to process the whole thing.&nbsp; There was a lack of .NET based EXIF libraries, but I did manage to find <a href="http://www.drewnoakes.com/code/exif/">Drew Noakes&rsquo; library</a>, which was in Java, but it did have a <a href="http://renaud91.free.fr/MetaDataExtractor/">C# port</a>.&nbsp; So I cannibalised the port to get what we needed (mainly stripped it down and changed it to use XML resource files).&nbsp; I had plans to add in the code other things like IPTC and manufacturer specific tags, but never got to it.&nbsp; The way it was working was still frustrating, as it would often show properties like &ldquo;Flash: 16&rdquo;.&nbsp; What does that mean?&nbsp; Well, 16 stood for something, but it wasn&rsquo;t able to process those individually.</p>
<p>Then I got my new Digital Rebel XT.&nbsp; Upon uploading my first pictures, I found none of the EXIF tags were showing.&nbsp; After some testing, it was causing a stack overflow exception due to a cyclic&nbsp;EXIF directory.&nbsp; This was a bug in the core library.&nbsp; Luckily, a few days before I found this, Drew released a new version of his Java library with this issue fixed&hellip; but nothing about an updated C# port.</p>
<p>So what is a desperate coder to do?&nbsp; Port it themselves!&nbsp; It took me a couple night here there over the past few weeks to get it done, but finally got it all ported to C#.&nbsp; Porting Java to C# is so boring.&nbsp; I&rsquo;m not fully done yet, as naming conventions are still wrong (getTagName() as opposed to GetTagName()).&nbsp; Surprisingly, it worked pretty much right away&hellip; except for some certain images.</p>
<p>My normal picture workflow now is take pictures in RAW, open in Photoshop to adjust white balance, reduce noise, and often resize&hellip; then I save as a TIFF, and then fire up <a href="http://www.faststone.org/">FastStone Photo Resizer</a> to convert them all to JPEG and to carry over the EXIF data.&nbsp; The problem was that the library wasn&rsquo;t reading any EXIF properties from these files.&nbsp; Fast forward a couple of hours of debugging and researching, I found the bug in the library (was checking the size of a EXIF directory wrong), and it is working great!</p>
<p>Now fast forward another couple hours of hacking things apart, and I finally managed to get it built into my Community Server build.&nbsp; So now you get far more proper EXIF values, <a href="http://qgyen.net/photos/category1000/exif/picture1179.aspx">such as these</a>.&nbsp; Complete with IPTC, support for Canon, Nikon, Sony, Olympus, Pentax, and a bunch of other manufactures.</p>
<p>This support is not going to be in Community Server v2.0 RTM though.&nbsp; It is far to late to throw this into the source, and I haven&rsquo;t even fully tested it, or changed it to use our XML resource files.&nbsp; But I will probably be looking into releasing it after CS RTMs, though it will certainly not be an update for the faint of heart.</p>
<p>Overall, I&rsquo;d love to see the Photo Galleries in CS expand far greater and be a serious option for photo enthusiasts, and fully featured EXIF support is definitely a big step in that direction.</p>
         
