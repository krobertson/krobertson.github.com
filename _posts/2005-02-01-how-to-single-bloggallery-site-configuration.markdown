--- 
wordpress_id: 8
layout: post
title: "How To: Single Blog/Gallery Site Configuration"
wordpress_url: /archive/cs-howto-single-site/
---

<p><strong>Updated:</strong> This method is vastly out of date.&nbsp; It was only for Community Server v1.0.&nbsp; Please see <a href="http://qgyen.net/archive/2006/07/14/Qgyen.ExtendedUrlMapping-for-CS-v2.1.aspx">http://qgyen.net/archive/2006/07/14/Qgyen.ExtendedUrlMapping-for-CS-v2.1.aspx</a>&nbsp;for the new method in CS v2.0 and v2.1.</p><p>Community Server was designed around the idea of multi-user community featuring forums, blogs, and photo galleries.&nbsp; This is a great and easy setup for people running community sites, but there are still a lot of people who run their own personal site and want the same blog/gallery functionality.</p><p>The purpose of this article to show how to configure Community Server to run utilizing only a single blog and gallery.&nbsp; This should also show easy it is to do simple customizations utilizing the Community Server framework.&nbsp; Configuring a single blog/gallery can be done in only 7 simple steps and utilizing a customized SiteUrls.config file</p><p><strong><u>Downloads</u></strong></p><p>Download the following file: singlesite.zip</p><p><strong><u>Instructions</u></strong></p><ol><li>Create the blog and gallery you want to be your primary blog/gallery.&nbsp; Go to the Admin area, click on either Blogs or Galleries, and go to Manage Blogs/Manage Galleries.&nbsp; Create a blog named something like &ldquo;Blog&rdquo; and Gallery named something like &ldquo;Photos&rdquo;.&nbsp; After creating your blog/gallery, you will want to click on it and take note of the &quot;Blog Name&quot; field in Blogs and &quot;Application Key&quot; field in Galleries.&nbsp; You will need this later.<br /><br /></li><li>Overwrite the SiteUrls.config file in your Community Server directory with the one included in the zip..<br /><br /></li><li>Open up the SiteUrls.config and configure the folder you want your blog/gallery to be accessible from.&nbsp; Look under &ldquo;locations&rdquo; for the &ldquo;weblogs&rdquo; and &ldquo;galleries&rdquo; entries.&nbsp; Change them to your wishes.&nbsp; The default in the included file is /blog/ for your blog, and /photos/ for your gallery (/photos/ is the default in Community Server for a multi-user site as well)..<br /><br /></li><li>Rename the blogs and photos folder in your Community Server directory to match the settings in the SiteUrls.config.&nbsp; If you are using the default settings included in the file, just rename the &ldquo;blogs&rdquo; folder to &ldquo;blog&rdquo;..<br /><br /></li><li>Copy the included sample_web.config to the /photos/ directory, name it web.config, and open it up.&nbsp; Change the value for the &ldquo;ApplicationKey&rdquo; entry to match the Application Key setting for your photo gallery..<br /><br /></li><li>The blogs already has its own web.config, so copy the section from the sample or from the gallery file and paste it into the web.config in the blogs directory.&nbsp; Change the value for the &ldquo;ApplicationKey&rdquo; entry to match the Application Key setting for you blog..<br /><br /></li><li>Open up the root level web.config and find the &lt;httpHandlers&gt; section.&nbsp; Any entries with a path starting with &quot;blogs/&quot; or &quot;photos/&quot; should be changed to reflect&nbsp;the directories you used in step 4.&nbsp; These are used for RSS feeds and the Metablog API support for the blogs.</li></ol><p><strong><u>Background</u></strong></p><p>Customizing Community Server in this way is achieved by modifying its URL schema to remove&nbsp;the directory level from the URLs that normally specifies which blog/gallery to load.&nbsp; If you compare the SiteUrls.config entry for &ldquo;gallery_ViewGallery&rdquo; from the default file and the included file, you will notice a few differences:</p><ul><li>The path&nbsp;attribute is missing a {0} parameter which was a directory. </li><li>The pattern attribute is missing a ([\w\.-]+) section which was used in the regular expression to grab the Application Key. </li><li>The vanity attribute is missing the &ldquo;App=$1&rdquo; section, which was used to pass the Application Key to the page that handles the rewritten URL.</li></ul><p>This affectively changes Community Server&rsquo;s URL rewriting to no longer specify which blog/gallery to load.&nbsp; It will no longer look for the Application Key in the URL the user uses the access the site, and the Application Key will no longer be included in links generated by Community Server itself.</p><p>Since one is no longer specified using the URL, we still need to tell Community Server which one needs to be loaded.&nbsp; This is where the web.config file comes in.&nbsp; In the absence of a &ldquo;App&rdquo; setting in the query string, Community Server will fall back on reading the ApplicationKey from the AppSettings section of the web.config.&nbsp; These files are placed in both the blog and photos directory in order to narrow their scope to just the blog and photos areas.</p>
         
