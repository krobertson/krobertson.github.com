--- 
wordpress_id: 284
layout: post
title: The quality of some code
wordpress_url: /archive/the-quality-of-some-code/
---

<p>Sometimes when I decompile some code I find, it can be really interesting and odd to de-construct the thought patterns of some developers.&nbsp; In this case, I was experiencing a bug with an ASP.NET web app I&#39;d set up recently, and the company that makes it wasn&#39;t being the most helpful, so I decided to decompile one of the problem assemblies, reverse engineer it, and fix their bug.</p> <p>Can find some odd behavior though... in this case, they <em>love</em> utility classes, and completely abuse them.&nbsp; Here is one thing I found it doing when looking through the code:</p> <blockquote> <p>byte[] originalArray;<br />...<br />object[] middleArray = new object[length];<br />System.Array.Copy(originalArray, index, middleArray, 0, length);<br />byte[] finalArray = new byte[middleArray.Length];<br />for (int i = 0; i &lt; middleArray.Length; i++)<br />&nbsp;&nbsp;&nbsp;&nbsp; finalArray<img src="http://qgyen.net/emoticons/emotion-55.gif" alt="Idea" /> = (byte) middleArray<img src="http://qgyen.net/emoticons/emotion-55.gif" alt="Idea" />;</p></blockquote> <p>They basically copy twice, when they only need to once.&nbsp; Also, that the shortened version.&nbsp; The beginning processing was in one class, the System.Array.Copy was done in a utility method that copies a segment of one array to a object[] array, and then had another utility to convert an array of object[] to byte[] (yes, specifically to byte[]... like it is something they do often enough.</p> <p>All those lines and methods could really be compressed down to this:</p> <blockquote> <p>byte[] originalArray;<br />byte[] finalArray = new byte[length];<br />System.Array.Copy(originalArray, index, finalArray, 0, length);</p></blockquote> <p>Wow, imagine that.</p> <p>Not really sure what to make out of things like that.&nbsp; Poor design?&nbsp; Over engineering?&nbsp; Someone&#39;s twisted sense of job security?</p>
         
