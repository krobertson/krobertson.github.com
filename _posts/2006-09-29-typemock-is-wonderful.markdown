--- 
wordpress_id: 206
layout: post
title: TypeMock is wonderful
wordpress_url: /archive/typemock-is-wonderful/
---

<p><a href="http://www.typemock.com/">TypeMock</a> is absolutely awesome.&nbsp; No, no, it is sexy.&nbsp; It is dead sexy.&nbsp; TypeMock has opened up a whole new world for me in unit tests.&nbsp; <a href="http://hanselman.com/blog/">Scott Hanselman</a>'s podcast on <a href="http://hanselminutes.com/default.aspx?showID=43">mock objects</a> came at the perfect time.&nbsp; It was literally that day, I was sitting there thinking "this is exactly what I need."</p> <p>Previously, part of the trickery around unit testing was that it could be heavily dependent upon the data in the database or on outside systems.&nbsp; Want to have a test that makes a post to CS?&nbsp; Run it twice in a row and could run into an issue with the duplicate post checker.&nbsp; Want to test some Mail Gateway processing?&nbsp; It may need to connect to an IMAP/POP3 server to get some mail.&nbsp; There may not be any there.</p> <p>Enter TypeMock.</p> <p>There are a number of mock frameworks out there, and a number of great free ones.&nbsp; But one recurring thing I've seen is that they need the classes to be interfaces, so anything I want to override needs to be an interface, or they often can't access methods/properties that are static or something.&nbsp; Not with TypeMock.</p> <p>I would definitely find needing to make everything an interface tedious.&nbsp; And on top of that, that wouldn't work for external libraries.&nbsp; Take the ASP.NET Profile class.&nbsp; It is not an interface, and I can't make it an interface.&nbsp; I could create our own Profile interface and change it all throughout CS, but is it worth it just for a unit test when there are easy alternatives?&nbsp; Perfect example of this was a&nbsp;unit test I wrote recently for testing processing of email templates.&nbsp; The template file it loads depends on the user's language setting.&nbsp; I can do a straight user.Profile.Language = "en-US", because the profile is read only be default, and there is a ton of work to make it writeable and everything.&nbsp; So, just mock it.</p> <blockquote> <p> <div class="wlWriterSmartContent" id="57F11A72-B0E5-49c7-9094-E3A15BD5B5E7:6a75027a-71d1-4b89-b4f1-48d80d0f5036" style="padding-right:0px;display:inline;padding-left:0px;float:none;padding-bottom:0px;margin:0px;padding-top:0px;"><pre style="background-color:White;"><div><span style="color:#000000;">    Mock profileMock </span><span style="color:#000000;">=</span><span style="color:#000000;"> MockManager.MockAll(</span><span style="color:#0000FF;">typeof</span><span style="color:#000000;"> (Profile));
    profileMock.ExpectGetAlways(</span><span style="color:#000000;">&quot;</span><span style="color:#000000;">Language</span><span style="color:#000000;">&quot;</span><span style="color:#000000;">, </span><span style="color:#000000;">&quot;</span><span style="color:#000000;">en-US</span><span style="color:#000000;">&quot;</span><span style="color:#000000;">);
</span></div></pre></div></p></blockquote>
<p>Sweet.&nbsp; All done.&nbsp; Just create a mock and tell it to always return en-US for the Language.</p>
<p>In the same test, a part of the process is to queue the message, but that hits the DB and requires the DB connection all there.&nbsp; Don't want to both with that.&nbsp; DB is in separate tests, just want to test the actual processing of the email template.&nbsp; So mock the DB call so it doesn't actually go to it.</p>
<blockquote>
<p>
<div class="wlWriterSmartContent" id="57F11A72-B0E5-49c7-9094-E3A15BD5B5E7:b0b29fce-3b9f-4b34-a747-7b59d5f995c8" style="padding-right:0px;display:inline;padding-left:0px;float:none;padding-bottom:0px;margin:0px;padding-top:0px;"><pre style="background-color:White;"><div><span style="color:#000000;">    Mock queueMock </span><span style="color:#000000;">=</span><span style="color:#000000;"> MockManager.MockAll(</span><span style="color:#0000FF;">typeof</span><span style="color:#000000;"> (SqlEmailQueueProvider));
    queueMock.ExpectCall(</span><span style="color:#000000;">&quot;</span><span style="color:#000000;">QueueEmail</span><span style="color:#000000;">&quot;</span><span style="color:#000000;">);
</span></div></pre></div></p></blockquote>
<p>Writing a test on blogging by email and need to test it adding the post.&nbsp; But you don't want it to actually go to the DB, however, it needs to return a PostID after the post is created.&nbsp; No problem.</p>
<blockquote>
<p>
<div class="wlWriterSmartContent" id="57F11A72-B0E5-49c7-9094-E3A15BD5B5E7:c801f0d5-3afd-4a8f-81eb-336d270b5d8d" style="padding-right:0px;display:inline;padding-left:0px;float:none;padding-bottom:0px;margin:0px;padding-top:0px;"><pre style="background-color:White;"><div><span style="color:#000000;">    Mock weblogDPMock </span><span style="color:#000000;">=</span><span style="color:#000000;"> MockManager.MockAll(</span><span style="color:#0000FF;">typeof</span><span style="color:#000000;"> (WeblogSqlDataProvider));
    weblogDPMock.AlwaysReturn(</span><span style="color:#000000;">&quot;</span><span style="color:#000000;">AddPost</span><span style="color:#000000;">&quot;</span><span style="color:#000000;">, BlogPostResults.Success).Args(Check.IsAny(), Check.IsAny(), </span><span style="color:#0000FF;">new</span><span style="color:#000000;"> Assign(</span><span style="color:#000000;">1</span><span style="color:#000000;">));
</span></div></pre></div></p></blockquote>
<p>Simply beautiful.&nbsp; I can sit there and test all day without worrying about having the proper set of sample data in the DB beforehand, getting duplicate post issues, or anything.</p>
         
