<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>In Valid Logic</title>
 <link href="http://invalidlogic.com/atom.xml" rel="self"/>
 <link href="http://invalidlogic.com"/>
 <link rel="license" type="/application/rdf+xml" href="http://creativecommons.org/licenses/by-nc-sa/3.0/rdf" />
 <updated>2010-12-08T10:12:27-08:00</updated>
 <id>http://invalidlogic.com</id>
 <author>
     <name>Ken Robertson</name>
     <email>ken@invalidlogic.com</email>
 </author>

 
 <entry>
   <title>Progress through iterating</title>
   <link href="http://invalidlogic.com//2010/12/08/progress-through-iterating/"/>
   <link rel="license" type="text/html" href="http://creativecommons.org/licenses/by-nc-sa/3.0/" />
   <updated>2010-12-08T00:00:00-08:00</updated>
   <id>http://invalidlogic.com//2010/12/08/progress-through-iterating</id>
   <content type="html">&lt;p&gt;It was a little over a year ago that I launched the public beta of Trunks, and when talking with a friend was looking back at all the revisions it has gone though.  Although its only been live a year, I've actually been working on the project for 3 years now and I'm on the 4th major revision of its codebase.&lt;/p&gt;

&lt;p&gt;The projects that are most fulfilling long-term are those that you have a vested interest in.  Often times, they're beyond purely financial.  I have never gauged Trunk's success on its profits, rather it is an idea that I myself find value in, and believe others do as well.  That is why I've stuck with it over time.&lt;/p&gt;

&lt;p&gt;Each major revision has addressed problem areas of the previous and has gotten incrementally better and more mature.  When looking back, can clearly see the problem points of the previous version and how they were addressed.  It is important to look back to see the path you've traveled.  Be aware of the mistake you've already addressed so as to not re-introduce them.  And if nothing else, feel proud of the investment you've made in the project and you own growth.&lt;/p&gt;

&lt;p&gt;I had basically forgotten I'd been working on Trunks for 3 years.  After being reminded, was looking at it and thinking damn, its come a long way.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Tool Enlightenment, Part 2</title>
   <link href="http://invalidlogic.com//2010/10/25/tool-enlightenment-part-2/"/>
   <link rel="license" type="text/html" href="http://creativecommons.org/licenses/by-nc-sa/3.0/" />
   <updated>2010-10-25T00:00:00-07:00</updated>
   <id>http://invalidlogic.com//2010/10/25/tool-enlightenment-part-2</id>
   <content type="html">&lt;p&gt;I started typing a follow up post about my experiences with vim, but then as I was adding a line about not throwing gasoline on the holy war that I was doing exactly that.  I was creating the stereotypical holy war inflamatory post.&lt;/p&gt;

&lt;p&gt;My main point in the previous post was about finding the tools that worked best for you, and ignoring the FUD from everyone else.&lt;/p&gt;

&lt;p&gt;So with that, I spent a week with vim, watched several screencasts, pulled in several plugins, and gave it a solid week of not using emacs and resisting TextMate.  At the end of that week, I've decided I'm more at home in emacs.&lt;/p&gt;

&lt;p&gt;The reasons are basically mute, especially since I'm trying to push for people to find out for themselves.  It is counter intuitive to give a now slanted opinion while telling you to ignore it.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Tool Enlightenment</title>
   <link href="http://invalidlogic.com//2010/10/14/tool-enlightenment/"/>
   <link rel="license" type="text/html" href="http://creativecommons.org/licenses/by-nc-sa/3.0/" />
   <updated>2010-10-14T00:00:00-07:00</updated>
   <id>http://invalidlogic.com//2010/10/14/tool-enlightenment</id>
   <content type="html">&lt;p&gt;Recently, I decided to take a journey down the path of enlightenment.&lt;/p&gt;

&lt;p&gt;One of the things I found so refreshing about Ruby/Rails when I first started using it was the simplicity of the tooling.  Just use a text editor, no monolithic IDE with large memory footprints, slow load times, and a panache for crashing.&lt;/p&gt;

&lt;p&gt;Visual Studio certainly is a great tool, and provides some powerful tools to .NET.  But I doubt anyone would disagree with me that Visual Studio often feels like a 500lb gorilla. Especially when you add in the plugins so many use, like CodeRush or ReSharper.  Simply opening TextMate was rather refreshing when coming from that kind of environment.&lt;/p&gt;

&lt;p&gt;A few weeks ago, I had the chance to go to &lt;a href=&quot;http://gogaruco.com&quot;&gt;GoGaRuCo&lt;/a&gt; and they had a workflow panel where they got some of the well known developers up on the stage, and discussed some of the tools and arrangements they use.  It was a little superficial, where it was &quot;I have an editor with 3 panes and 2 terminals open&quot;.  But there were some interesting observations.  First of all, everyone on the panel was using either Emacs or Vim.  After the talk, they polled the audience what they use.  The overwhelming majority of the audience was using either RubyMine or TextMate.&lt;/p&gt;

&lt;p&gt;The surface argument you could make is that all the &quot;hackers&quot; are using Emacs/Vim and aren't representative of the population.  Sure, I looked at it that way too.  But a few things started to peak my interest, particularly when I'd talk to an Emacs or Vim user.  You will almost always hear them say they've been using it for 10 years, 15 years, or sometimes even longer.&lt;/p&gt;

&lt;p&gt;Think about your toolset today and your toolset 10 years ago.  Is there &lt;i&gt;anything&lt;/i&gt; that you're still using?  If so many people will stick with the same tool for 10 years, spanning technology bubbles, and crossing over to new languages, there must be something that tool is doing right.  These are tools whose users invest in them.  They're like marriages.&lt;/p&gt;

&lt;p&gt;So my journey to enlightenment has begun with looking at Emacs, however I'm not just playing eenie-meenie-miney-moe. Both Emacs and Vim have large followings are both excellent choices. The way I see it, I can't chose which direction to go without looking both ways.  So, I'm trying both for 1-2 weeks each, play around with building my .emacs and vimrc, and see where it leads.&lt;/p&gt;

&lt;p&gt;I've been using Emacs for almost 2 weeks now, and find myself opening stuff up in TextMate less and less.  Next week, I plan to focus more on Vim and try it out.&lt;/p&gt;

&lt;p&gt;But I think the true enlightenment that can be found is... the elite tools are not what the &quot;hacker&quot; portion of a community use.  Use what fits your style best, understand why you've chosen your tools, and recognize those same decisions in the tools used by those around you.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Involver Team and Matz</title>
   <link href="http://invalidlogic.com//2010/10/08/involver-team-and-matz/"/>
   <link rel="license" type="text/html" href="http://creativecommons.org/licenses/by-nc-sa/3.0/" />
   <updated>2010-10-08T00:00:00-07:00</updated>
   <id>http://invalidlogic.com//2010/10/08/involver-team-and-matz</id>
   <content type="html">&lt;p&gt;Yukihiro &quot;Matz&quot; Matsumoto was speaking yesterday at the &lt;a href=&quot;http://www.twilio.com/&quot;&gt;Twilio&lt;/a&gt; offices in San Francisco on what is coming in Ruby 2.0.  Was a great time and was a pleasure to meet Matz in person.  I love to meet people who have changed the industry, but still remain humble.  He was very polite, thanking us for coming, shaking hands, meanwhile everyone was thanking him for Ruby.&lt;/p&gt;

&lt;p&gt;One of the great question after the presentation was someone asking him what it is like having, basically, changed development and how it felt when he first realized it was catching on.  Matz said that time was around when the first picaxe book came out.  It was having someone other than himself writing an English book about Ruby and it selling well.  But his general answer to what it was like was &quot;its nice&quot;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://invalidlogic-blog.s3.amazonaws.com/100_0098_2.jpg&quot; alt=&quot;&quot; title=&quot;100_0098_2&quot; width=&quot;640&quot; height=&quot;480&quot; class=&quot;aligncenter size-full wp-image-609&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The Involver team had the opportunity to take a bit of a team photo with him.  This represents about a quarter of the total Involver Engineering team.  Here we have &lt;a href=&quot;http://twitter.com/zedlander&quot;&gt;@zedlander&lt;/a&gt;, Jaime our System Overlord, myself, Nina our QA queen, and &lt;a href=&quot;http://twitter.com/zquestz&quot;&gt;@zquestz&lt;/a&gt; (aka Josh) who just started this week.  &lt;a href=&quot;http://twitter.com/nolamn&quot;&gt;@nolman&lt;/a&gt; was also there, but had to take off right after the talk.&lt;/p&gt;

&lt;p&gt;Ruby 2.0 will have a number of small but very nice language improvements, such as keyword arguments (similar to what .NET 4.0 added), as well as the ability to namespace things, including monkey patching that is scoped to only the namespace.  That there is something that seems like it will bring a lot of power.  Use two libraries that use two different versions of a gem?  What if you could load them in separate namepaces, each utilizing the separate gem versions.  Perhaps you could get really crazy and have a Rails 2 and Rails 3 app running together using separate namespaces.  I don't know why anyone would do that, but you could, and that I like.&lt;/p&gt;

&lt;p&gt;Ruby 2.0 will see a large emphasis on embedded and an alternative VM/interpretter for more targeted implementations.  I would love it if we could have a setup similar to the Arudio or Neturdio that ran Ruby.  Matz was talking about bringing Ruby to places like digital appliances, more RTOS environments focusing on latency instead of throughput.  Or having Ruby implementations for the cloud that utilized a smaller subset of the language to run on more targeted hardware.  Distributed processing where perhaps computational power is more important than IO or what not.&lt;/p&gt;

&lt;p&gt;My first thought... in a few years, could my DVR be running a Rails web interface?&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>You got RVM and git in my command prompt!</title>
   <link href="http://invalidlogic.com//2010/09/16/you-got-rvm-and-git-in-my-command-prompt/"/>
   <link rel="license" type="text/html" href="http://creativecommons.org/licenses/by-nc-sa/3.0/" />
   <updated>2010-09-16T00:00:00-07:00</updated>
   <id>http://invalidlogic.com//2010/09/16/you-got-rvm-and-git-in-my-command-prompt</id>
   <content type="html">&lt;p&gt;I had posted this to our internal wiki at work, but &lt;a href=&quot;http://twitter.com/scottw&quot;&gt;Scott&lt;/a&gt; had mentioned he &lt;a href=&quot;http://twitter.com/scottw/status/24492462082&quot;&gt;was interested in it&lt;/a&gt;, so figured I'd throw it up here.&lt;/p&gt;

&lt;p&gt;Zsh is the best shell.  If you don't know, &lt;a href=&quot;http://www.zsh.org/&quot;&gt;now you know&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;One thing that is a nice convenience is to setup the command prompt to include your current Ruby implementation, RVM gemset, and which branch of the git repository you are in.  In our main codebase at Involver, my prompt looks like this:&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;http://img.skitch.com/20100916-r1s8h53qw3pc718fnb4fnrsefy.jpg&quot; alt=&quot;prompt&quot; width=&quot;496&quot; height=&quot;84&quot; /&gt;&lt;/div&gt;


&lt;p&gt;From this, I can tell I'm using JRuby 1.5.1, the &quot;involver&quot; gemset.  I'm in the &quot;topsecret&quot; project folder (I just have the current directory, not the full path), and the &quot;git:master&quot; indicates its a git repository and I'm in the master branch.&lt;/p&gt;

&lt;p&gt;To achieve that, add the following into your .zshrc or one of the files you source into it.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;&lt;span class=&quot;lineno&quot;&gt; 1&lt;/span&gt; parse_git_branch() {
&lt;span class=&quot;lineno&quot;&gt; 2&lt;/span&gt;   git branch 2&amp;gt; /dev/null | sed -e &amp;#39;/^[^*]/d&amp;#39; -e &amp;#39;s/* \(.*\)/\/git:\1/&amp;#39;
&lt;span class=&quot;lineno&quot;&gt; 3&lt;/span&gt; }
&lt;span class=&quot;lineno&quot;&gt; 4&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt; 5&lt;/span&gt; rvm_prompt() {
&lt;span class=&quot;lineno&quot;&gt; 6&lt;/span&gt;   $HOME/.rvm/bin/rvm-prompt v g
&lt;span class=&quot;lineno&quot;&gt; 7&lt;/span&gt; }
&lt;span class=&quot;lineno&quot;&gt; 8&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt; 9&lt;/span&gt; export PS1=&amp;#39;%{$reset_color$fg[blue]%}$(rvm_prompt)%{$reset_color$fg[gray]%}:
&lt;span class=&quot;lineno&quot;&gt;10&lt;/span&gt; %1~%{$reset_color$bold_color$fg[green]%}%{$reset_color$fg[green]%}
&lt;span class=&quot;lineno&quot;&gt;11&lt;/span&gt; $(parse_git_branch)&amp;gt;%{$reset_color%} &amp;#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;There are of course many more things you can do with zsh.  I have this and other tidbits in my &lt;a href=&quot;http://github.com/krobertson/dotfiles&quot;&gt;dotfiles repo&lt;/a&gt; on Github.  And now that I think of it, have some stuff I haven't checked in since I'm not in TextMate/Ruby/zsh all day.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>The Future of Papercut</title>
   <link href="http://invalidlogic.com//2010/09/08/the-future-of-papercut/"/>
   <link rel="license" type="text/html" href="http://creativecommons.org/licenses/by-nc-sa/3.0/" />
   <updated>2010-09-08T00:00:00-07:00</updated>
   <id>http://invalidlogic.com//2010/09/08/the-future-of-papercut</id>
   <content type="html">&lt;p&gt;It has been three months since I moved to doing Ruby full time, and it has been three months since I've written any .NET.  This is a trend that will likely continue as I'm no longer writing .NET day to day.  However, I don't want one of my babies, &lt;a href=&quot;http://papercut.codeplex.com/&quot;&gt;Papercut&lt;/a&gt;, to die a neglectful death.&lt;/p&gt;

&lt;p&gt;Papercut isn't really a large codebase and doesn't have a laundry list of problems or anything, but it does have a list of feature requests that I know I won't have the time to get to.  So I am looking for someone to take over maintenance of it.&lt;/p&gt;

&lt;p&gt;With open source, it is easy enough for anyone to fork the code and run with it, but people still tend to be drawn to the official codebase and site for the latest updates.  The problem with looking for people to take over is that you can't necessarily hand it off to just anyone.  In many ways, it is like applying for a job.  You can't just say &quot;ohh, I'll do it!&quot; since the bigger question is are you capable of doing it.&lt;/p&gt;

&lt;p&gt;The ideal person would be someone who:&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;Has experience with .NET socket development.&lt;/li&gt;
    &lt;li&gt;Understands the SMTP protocol, or can read and make sense of protocol RFCs.&lt;/li&gt;
    &lt;li&gt;Understands MIME format enough to work with it.&lt;/li&gt;
    &lt;li&gt;Be good to have a basic understanding of asynchronous IO and threading/managed thread pools.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This isn't an absolute list, but more of a wish list or a list of what you should expect.  Most of the feature requests for Papercut involve extending it to support more MIME functionality and bugs will often require troubleshooting the networking code or threading, which can be very different than traditional web or GUI apps.&lt;/p&gt;

&lt;p&gt;Anyone who is interested, please email me at ken@invalidlogic.com.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>A Personal Retrospective</title>
   <link href="http://invalidlogic.com//2010/08/30/a-personal-retrospective/"/>
   <link rel="license" type="text/html" href="http://creativecommons.org/licenses/by-nc-sa/3.0/" />
   <updated>2010-08-30T00:00:00-07:00</updated>
   <id>http://invalidlogic.com//2010/08/30/a-personal-retrospective</id>
   <content type="html">&lt;p&gt;I'd heard of people applying agile methodologies to their lives through things like personal kanban.  I recently decided to apply another practice: retrospectives.  Sounds simple, but when I thought about it, it really isn't that often that I sit down and take stock of where I am and have action items at the end of it.&lt;/p&gt;

&lt;p&gt;The idea is simple.  Get away from distractions for a while.  Grab a whiteboard, piece of paper, or whatever you have.  Mark out three columns.  In the first, list the things that have been going well or that you like about where you are in life.  In the second, list the things you don't like.  And in the final, come up with a resolution or first action item for each of the things you don't like.&lt;/p&gt;

&lt;p&gt;The goal of it is to acknowledge what has been going well, figure out what hasn't, and get the ball rolling on tackling those.  Just like you do with your projects!&lt;/p&gt;

&lt;p&gt;I am by no means an agile expert, or a super organized, together person.  But I was thinking about how it has been 3 months since making a rather big career change and wanted to take stock of how things have gone, but personally and not just professionally.&lt;/p&gt;

&lt;p&gt;Try it for yourself and see how it goes.  For me, I think a 3 month rotation is about right.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Presenting on Chef at next SacRuby Meetup</title>
   <link href="http://invalidlogic.com//2010/08/13/presenting-on-chef-at-next-sacruby-meetup/"/>
   <link rel="license" type="text/html" href="http://creativecommons.org/licenses/by-nc-sa/3.0/" />
   <updated>2010-08-13T00:00:00-07:00</updated>
   <id>http://invalidlogic.com//2010/08/13/presenting-on-chef-at-next-sacruby-meetup</id>
   <content type="html">&lt;p&gt;If you are in the Sacramento area next Thursday, come by the SacRuby Meetup!  I will be presenting on using &lt;a href=&quot;http://wiki.opscode.com/&quot;&gt;Chef&lt;/a&gt; for server and configuration management.  I will be talking about using Chef on a large scale with a cluster of servers, all the way down to aiding management of a single server.&lt;/p&gt;

&lt;p&gt;If you are in the area, please stop by!  Pizza and refreshments are normally available.&lt;/p&gt;

&lt;blockquote&gt;Meetup details: &lt;a href=&quot;http://www.meetup.com/sacruby/calendar/14122667/&quot;&gt;http://www.meetup.com/sacruby/calendar/14122667/&lt;/a&gt;
Date: Thursday, August 19th
Time: 7:30pm til we go home
Location: 10911 White Rock Road, Rancho Cordova, CA 95670  (see details for number to call to get building access)&lt;/blockquote&gt;


&lt;p&gt;The main talk starts at 7:30, however we will also have a Ruby Clinic starting at 6:30.  Bring your questions, problems, or other issues in and we'll try to help you out.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Using server aliases with Capistrano output</title>
   <link href="http://invalidlogic.com//2010/07/15/using-server-aliases-with-capistrano-output/"/>
   <link rel="license" type="text/html" href="http://creativecommons.org/licenses/by-nc-sa/3.0/" />
   <updated>2010-07-15T00:00:00-07:00</updated>
   <id>http://invalidlogic.com//2010/07/15/using-server-aliases-with-capistrano-output</id>
   <content type="html">&lt;p&gt;One thing we often run into without deploys is &quot;what server is that executing on?&quot;  After updating code, we actually a fairly elaborate process to remove servers from load balancing, restart, wait for load to drop off, then add it back in to load balancing.  We also just use the AWS hostnames rather than our own since our server list pretty much changes weekly.  Wouldn't it be nice to have the ouptut show &quot;app10&quot; instead of &quot;ec2-123-123-123-123.compute-1.amazonaws.com&quot;.&lt;/p&gt;

&lt;p&gt;Luckily adding an alias to Capistrano is pretty easy!&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;lineno&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Capistrano&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ServerDefinition&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 2&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;to_s&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 3&lt;/span&gt;     &lt;span class=&quot;vi&quot;&gt;@to_s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 4&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:alias&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 5&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 6&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;22&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 7&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 8&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 9&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Simply add that to your deploy.rb, or another file that is included with your recipes for utility methods.  It works simply by overriding the ServerDefinition.to_s method, which is used for the logger output.  The only change to the default method is line 4.&lt;/p&gt;

&lt;p&gt;Then for your role definitions:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;role&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;ec2-123-123-123-123.compute-1.amazonaws.com&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:alias&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;app10&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Then you see much better output:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt; ** [out :: app10] Alive
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;



</content>
 </entry>
 
 <entry>
   <title>Tracing controller filters in New Relic</title>
   <link href="http://invalidlogic.com//2010/06/18/tracing-controller-filters-in-new-relic/"/>
   <link rel="license" type="text/html" href="http://creativecommons.org/licenses/by-nc-sa/3.0/" />
   <updated>2010-06-18T00:00:00-07:00</updated>
   <id>http://invalidlogic.com//2010/06/18/tracing-controller-filters-in-new-relic</id>
   <content type="html">&lt;p&gt;Yet another New Relic goodie today.&lt;/p&gt;

&lt;p&gt;One thing I was kind of surprised that New Relic didn't already have instrumentation around out of the box was controller filters.  We had noticed some occasional gaps after the main processing of an action, where all the templates would be rendered, but the execution still went on for a few hundred milliseconds (or sometimes more).  Finally, it dawned that it is probably one of the after_filters.&lt;/p&gt;

&lt;p&gt;So we aded tracing around filter execution, and lo and behold, we had one that from time to time would misbehave and execute slow.&lt;/p&gt;

&lt;p&gt;To instrument the filters, the simplest way seemed to be by tacking on to the 'call' method of each filter type.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;lineno&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ActionController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Filters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;BeforeFilter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;class_eval&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 2&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;add_method_tracer&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Custom/BeforeFilter/#{method.to_s}&amp;#39;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 3&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 4&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt; 5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ActionController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Filters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;AfterFilter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;class_eval&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 6&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;add_method_tracer&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Custom/AfterFilter/#{method.to_s}&amp;#39;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 7&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 8&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt; 9&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ActionController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Filters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;AroundFilter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;class_eval&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;10&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;add_method_tracer&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Custom/AroundFilter/#{method.to_s}&amp;#39;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;11&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;And one more goodie while I'm looking at my list of New Relic tracers... ActionMailer.  Have seen this time and time again, that sending email synchronously with the HTTP request can drastically slow down performance.  SMTP server can be slow, can be mailing a number of recipients, submission fails, etc.  For us, most email delivery is asynchronous in the background, but one or two are triggered in line.&lt;/p&gt;

&lt;p&gt;To trace ActionMailer delivery:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ActionMailer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;class_eval&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;add_method_tracer&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:deliver!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Custom/ActionMailer/deliver!&amp;#39;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Will maybe sometime look at email processing more, but email templates are often far simpler and their action methods do less loading.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Tracing Cache Money transactions through New Relic</title>
   <link href="http://invalidlogic.com//2010/06/15/tracing-cache-money-transactions-through-new-relic/"/>
   <link rel="license" type="text/html" href="http://creativecommons.org/licenses/by-nc-sa/3.0/" />
   <updated>2010-06-15T00:00:00-07:00</updated>
   <id>http://invalidlogic.com//2010/06/15/tracing-cache-money-transactions-through-new-relic</id>
   <content type="html">&lt;p&gt;At Involver, we've been starting to make heavy use of &lt;a href=&quot;http://newrelic.com/&quot;&gt;New Relic&lt;/a&gt; to start monitoring performance and track down bottlenecks.  I've been working to add method tracers around components that utilize external APIs or services, and some of the major components we leverage to know how much time is spent in various areas.&lt;/p&gt;

&lt;p&gt;We use &lt;a href=&quot;http://github.com/nkallen/cache-money&quot;&gt;Cache Money&lt;/a&gt;, a gem that helps transparently cache models in Memcached.  Out of the box, New Relic supports tracing calls for Memcached, however on traces we'd see a long list of Memcached calls but no information as to which request they were associated with.&lt;/p&gt;

&lt;p&gt;For a lot of our additional traces, we've added an rpm_extras.rb file.  To include tracing for Cache Money, just need to define it as follows:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;class_eval&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;add_method_tracer&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:transaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Custom/CacheMoney/transaction&amp;#39;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;4&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;add_method_tracer&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:find_every&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Custom/CacheMoney/find_every&amp;#39;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;5&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;add_method_tracer&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:find_from_ids&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Custom/CacheMoney/find_from_ids&amp;#39;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;6&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;New Relic itself uses add_method_tracer around transaction and find_by_sql, however Cache Money works by alias_method_chaining transaction, find_every, and find_from_ids.&lt;/p&gt;

&lt;p&gt;One thing worth noting is that since both New Relic and Cache Money make use of transaction, order of loading could be important.  In our environment.rb, we load our rpm_extras.rb in the after_initialize block.  When RPM is loaded, it wraps the actual ActiveRecord#transaction call, then Cache Money chains it, and our own tracer wraps the chained call.&lt;/p&gt;

&lt;p&gt;Initially, I tried putting the tracer around Cache Money's own transaction_with_cache_transaction, however that didn't show up in traces.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Isms</title>
   <link href="http://invalidlogic.com//2010/05/24/isms/"/>
   <link rel="license" type="text/html" href="http://creativecommons.org/licenses/by-nc-sa/3.0/" />
   <updated>2010-05-24T00:00:00-07:00</updated>
   <id>http://invalidlogic.com//2010/05/24/isms</id>
   <content type="html">&lt;p&gt;Last week, I gave a presentation at the SacRuby meetup on using Twilio with Sinatra.&lt;/p&gt;

&lt;p&gt;Someone, I believe it was &lt;a href=&quot;http://code.jeremyevans.net/&quot;&gt;Jeremy Evans&lt;/a&gt; (author of the &lt;a href=&quot;http://sequel.rubyforge.org/&quot;&gt;Sequel ORM&lt;/a&gt;) asked me why I was using exclusive returns at the end of my methods (&lt;a href=&quot;http://github.com/krobertson/kens-twilio-resume/blob/master/resume.rb#L46&quot;&gt;code in question&lt;/a&gt;).  It had never occurred to me and I had just answered with no reason.&lt;/p&gt;

&lt;p&gt;While going over the video of the presentation, came across his question again and was thinking about it.  I realized it is still a .NET-ism that I'm carrying.  In Ruby, you don't need to explicitly return at the end of a method.  The result of the last command will automatically be returned.  However in .NET, everything has to be an explicit return.&lt;/p&gt;

&lt;p&gt;When working with multiple languages, it is interesting to see the idioms cross over.  There have been multiple times I've been in C# and started typing &quot;return ... if ...&quot; or something similar.  Much the same, I'm so used to explicit returns in C# that I've used them in Ruby where I didn't really need to.&lt;/p&gt;

&lt;p&gt;It is important to be aware of the &quot;isms&quot; that influence you.  When moving into a new language, often times they are visible to others more familiar with the language, and more importantly, can shield you from other techniques the language offers.  While many are innocent, awareness is important to help you continue to grow.&lt;/p&gt;

&lt;p&gt;However when &quot;isms&quot; cross back to a language you already know, they offer a chance to gain new perspective on methodologies you already practice and a might offer an opportunity to pose the question &quot;how can I make this better&quot;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Taking a new direction</title>
   <link href="http://invalidlogic.com//2010/05/14/taking-a-new-direction/"/>
   <link rel="license" type="text/html" href="http://creativecommons.org/licenses/by-nc-sa/3.0/" />
   <updated>2010-05-14T00:00:00-07:00</updated>
   <id>http://invalidlogic.com//2010/05/14/taking-a-new-direction</id>
   <content type="html">&lt;p&gt;Today is my last day at &lt;a href=&quot;http://telligent.com&quot;&gt;Telligent&lt;/a&gt;.  After almost 6 years at Telligent, I have decided it is time to move on.  I've certainly enjoyed my time and taken pleasure in watching our products mature over that time and working with amazing developers who've definitely helped me grow.&lt;/p&gt;




&lt;p&gt;On Monday begins a new chapter though.  I've decided to make the leap from developing in .NET full time to focusing on Ruby and Rails.  On Monday, I join the team at &lt;a href=&quot;http://involver.com&quot;&gt;Involver&lt;/a&gt;, where I'll be building applications for marketers and brands to reach audiences through social media.  I am really looking forward to working on their platform and to get back to face to face time with my coworkers.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Is the netbook form factor good for anything?</title>
   <link href="http://invalidlogic.com//2010/04/14/is-the-netbook-form-factor-good-for-anything/"/>
   <link rel="license" type="text/html" href="http://creativecommons.org/licenses/by-nc-sa/3.0/" />
   <updated>2010-04-14T00:00:00-07:00</updated>
   <id>http://invalidlogic.com//2010/04/14/is-the-netbook-form-factor-good-for-anything</id>
   <content type="html">&lt;p&gt;Last night, my uncle called me to ask the same question about his netbook for the third time.  Right when he started out, I knew what it was and was just thinking he should get an iPad the whole time.  Netbooks are the wrong form factor for just about everything, especially if you aren't tech savvy.&lt;/p&gt;

&lt;p&gt;He called me to ask me about how to use a dialog box that goes off the screen.  It was his third time with that issue.  The first time, he was installing Adobe Acrobat Reader and the button on the license acceptance dialog was off screen.  The second time, it was with installing some DVD software.  And now, the third time, he was trying to print and the button was off screen.&lt;/p&gt;

&lt;p&gt;The problem with netbooks is they take an operating system meant for a full system and squeeze it down to a little 9-10&quot; display with a resolution of only 1024x600.  Nobody has designed anything with that small a resolution in mind for at least 10 years, if not longer.  800x600 dialogs were common before the web really caught on, before DVDs, and before laptops were actually mobile.&lt;/p&gt;

&lt;p&gt;I'd thought of getting a netbook but am very glad I didn't.  Having seen my uncle's and a few others, and especially after getting my hands on an iPad, there is no comparison.  The iPad is an OS and software designed with the form factor in mind.  A netbook and even future products like the HP Slate take a desktop OS and software and use it in a way never intended.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>On the other side</title>
   <link href="http://invalidlogic.com//2010/04/12/on-the-other-side/"/>
   <link rel="license" type="text/html" href="http://creativecommons.org/licenses/by-nc-sa/3.0/" />
   <updated>2010-04-12T00:00:00-07:00</updated>
   <id>http://invalidlogic.com//2010/04/12/on-the-other-side</id>
   <content type="html">&lt;blockquote&gt;It's too overwhelming to remember that at the end of every computer is a real person, a lot like you, whose birthday was last week, who has three best friends but nobody to spoon at night, and is personally affected by what you say.&lt;/blockquote&gt;


&lt;p&gt;From &lt;a href=&quot;http://sivers.org/real&quot;&gt;A real person, a lot like you&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Probably the biggest problem with communicating online is the lack of context.  When online you can't see facial expressions, hear the tone on their voice, or anything.  All you get is a blurb of text.&lt;/p&gt;

&lt;p&gt;I know I can be difficult for others to read at times, because I can be quite short and terse.  And I've certainly had encounters like Derek Sivers pointed out in his post with doing support.&lt;/p&gt;

&lt;p&gt;Since reading that post, I've tried to remain more conscious of that when working with others.  But it is also important to keep it in mind when you receive emails, IMs, comments, or other messages.  It can be easier for them to come off the wrong way and you just need to realize it might not actually be meant how it sounds.&lt;/p&gt;
</content>
 </entry>
 
 
</feed>